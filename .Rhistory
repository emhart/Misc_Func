traits <- rnorm(n.genes,1.75,.15)
###another version could use a uniform distribution
# traits <- runif(n.genes,1.4,2.12)
##Now resample genotypes 1:1000 with probabilities from the log normal
s.size <- sum(round(runif(81,100,200)))
pop <- sample(1:n.genes,s.size,prob=samp.p,replace=T)
###Assign to one of 12 ponds
pond.i <-sample(1:12,s.size,replace=T)
###Sub sample ponds for 20 individuals, and then 3 of those 20.
fin.daph <- vector()
for(j in 1:12){
pond.d <- pop[which(pond.i==j)]
pass.1 <- sample(pond.d,20)
pass.2 <- sample(pass.1,3)
fin.daph <- c(fin.daph,pass.2)
}
sim.dat <- tapply(traits[fin.daph],sort(rep(1:12,3)),mean)
test.mod <- aov(sim.dat~dry+drou)
outmat <- matrix(0,ncol=2,nrow=n.sim)
outmat[i,summary(test.mod)[[1]][["Pr(>F)"]][1:2]]
}
summary(test.mod)[[1]][["Pr(>F)"]][1:2]
for(i in 1:n.sim){
####First create synthetic data
###draw log-normal probabilities
rdraw <- rlnorm(n.genes)
samp.p <- rdraw/sum(rdraw)
###Now draw trait values to associate with each genotype
###Values are constrained to what we observed in our ponds
traits <- rnorm(n.genes,1.75,.15)
###another version could use a uniform distribution
# traits <- runif(n.genes,1.4,2.12)
##Now resample genotypes 1:1000 with probabilities from the log normal
s.size <- sum(round(runif(81,100,200)))
pop <- sample(1:n.genes,s.size,prob=samp.p,replace=T)
###Assign to one of 12 ponds
pond.i <-sample(1:12,s.size,replace=T)
###Sub sample ponds for 20 individuals, and then 3 of those 20.
fin.daph <- vector()
for(j in 1:12){
pond.d <- pop[which(pond.i==j)]
pass.1 <- sample(pond.d,20)
pass.2 <- sample(pass.1,3)
fin.daph <- c(fin.daph,pass.2)
}
sim.dat <- tapply(traits[fin.daph],sort(rep(1:12,3)),mean)
test.mod <- aov(sim.dat~dry+drou)
outmat <- matrix(0,ncol=2,nrow=n.sim)
outmat[i,] <- summary(test.mod)[[1]][["Pr(>F)"]][1:2]
}
sum(outmat<.05)
outmat < .05
head(outmat)
outmat
outmat <- matrix(0,ncol=2,nrow=n.sim)
for(i in 1:n.sim){
####First create synthetic data
###draw log-normal probabilities
rdraw <- rlnorm(n.genes)
samp.p <- rdraw/sum(rdraw)
###Now draw trait values to associate with each genotype
###Values are constrained to what we observed in our ponds
traits <- rnorm(n.genes,1.75,.15)
###another version could use a uniform distribution
# traits <- runif(n.genes,1.4,2.12)
##Now resample genotypes 1:1000 with probabilities from the log normal
s.size <- sum(round(runif(81,100,200)))
pop <- sample(1:n.genes,s.size,prob=samp.p,replace=T)
###Assign to one of 12 ponds
pond.i <-sample(1:12,s.size,replace=T)
###Sub sample ponds for 20 individuals, and then 3 of those 20.
fin.daph <- vector()
for(j in 1:12){
pond.d <- pop[which(pond.i==j)]
pass.1 <- sample(pond.d,20)
pass.2 <- sample(pass.1,3)
fin.daph <- c(fin.daph,pass.2)
}
sim.dat <- tapply(traits[fin.daph],sort(rep(1:12,3)),mean)
test.mod <- aov(sim.dat~dry+drou)
outmat[i,] <- summary(test.mod)[[1]][["Pr(>F)"]][1:2]
}
hist(outmat[,1])
hist(outmat[,2])
outmat <- matrix(0,ncol=2,nrow=n.sim)
for(i in 1:n.sim){
####First create synthetic data
###draw log-normal probabilities
rdraw <- rlnorm(n.genes)
samp.p <- rdraw/sum(rdraw)
###Now draw trait values to associate with each genotype
###Values are constrained to what we observed in our ponds
traits <- rnorm(n.genes,1.75,.15)
###another version could use a uniform distribution
# traits <- runif(n.genes,1.4,2.12)
##Now resample genotypes 1:1000 with probabilities from the log normal
s.size <- sum(round(runif(81,100,200)))
pop <- sample(1:n.genes,s.size,prob=samp.p,replace=T)
###Assign to one of 12 ponds
pond.i <-sample(1:12,s.size,replace=T)
###Sub sample ponds for 20 individuals, and then 3 of those 20.
fin.daph <- vector()
for(j in 1:12){
pond.d <- pop[which(pond.i==j)]
pass.1 <- sample(pond.d,20)
pass.2 <- sample(pass.1,3)
fin.daph <- c(fin.daph,pass.2)
}
sim.dat <- tapply(traits[fin.daph],sort(rep(1:12,3)),mean)
test.mod <- aov(sim.dat~dry+drou)
outmat[i,] <- summary(test.mod)[[1]][["Pr(>F)"]][1:2]
}
sum(outmat[,1]<.05)
sum(outmat[,2]<.05)
outmat <- matrix(0,ncol=2,nrow=n.sim)
for(i in 1:n.sim){
####First create synthetic data
###draw log-normal probabilities
rdraw <- rlnorm(n.genes)
samp.p <- rdraw/sum(rdraw)
###Now draw trait values to associate with each genotype
###Values are constrained to what we observed in our ponds
#traits <- rnorm(n.genes,1.75,.15)
###another version could use a uniform distribution
traits <- runif(n.genes,1.4,2.12)
##Now resample genotypes 1:1000 with probabilities from the log normal
s.size <- sum(round(runif(81,100,200)))
pop <- sample(1:n.genes,s.size,prob=samp.p,replace=T)
###Assign to one of 12 ponds
pond.i <-sample(1:12,s.size,replace=T)
###Sub sample ponds for 20 individuals, and then 3 of those 20.
fin.daph <- vector()
for(j in 1:12){
pond.d <- pop[which(pond.i==j)]
pass.1 <- sample(pond.d,20)
pass.2 <- sample(pass.1,3)
fin.daph <- c(fin.daph,pass.2)
}
sim.dat <- tapply(traits[fin.daph],sort(rep(1:12,3)),mean)
test.mod <- aov(sim.dat~dry+drou)
outmat[i,] <- summary(test.mod)[[1]][["Pr(>F)"]][1:2]
}
sum(outmat[,2]<.05)
sum(outmat[,1]<.05)
275/1000
i <- 1
####First create synthetic data
###draw log-normal probabilities
rdraw <- rlnorm(n.genes)
samp.p <- rdraw/sum(rdraw)
###Now draw trait values to associate with each genotype
###Values are constrained to what we observed in our ponds
#traits <- rnorm(n.genes,1.75,.15)
###another version could use a uniform distribution
traits <- runif(n.genes,1.4,2.12)
##Now resample genotypes 1:1000 with probabilities from the log normal
s.size <- sum(round(runif(81,100,200)))
pop <- sample(1:n.genes,s.size,prob=samp.p,replace=T)
###Assign to one of 12 ponds
pond.i <-sample(1:12,s.size,replace=T)
###Sub sample ponds for 20 individuals, and then 3 of those 20.
fin.daph <- vector()
for(j in 1:12){
pond.d <- pop[which(pond.i==j)]
pass.1 <- sample(pond.d,20)
pass.2 <- sample(pass.1,3)
fin.daph <- c(fin.daph,pass.2)
}
sim.dat <- tapply(traits[fin.daph],sort(rep(1:12,3)),mean)
test.mod <- aov(sim.dat~dry+drou)
summary(test.mod)[[1]][["Pr(>F)"]][1:2]
####First create synthetic data
###draw log-normal probabilities
rdraw <- rlnorm(n.genes)
samp.p <- rdraw/sum(rdraw)
###Now draw trait values to associate with each genotype
###Values are constrained to what we observed in our ponds
#traits <- rnorm(n.genes,1.75,.15)
###another version could use a uniform distribution
traits <- runif(n.genes,1.4,2.12)
##Now resample genotypes 1:1000 with probabilities from the log normal
s.size <- sum(round(runif(81,100,200)))
pop <- sample(1:n.genes,s.size,prob=samp.p,replace=T)
###Assign to one of 12 ponds
pond.i <-sample(1:12,s.size,replace=T)
###Sub sample ponds for 20 individuals, and then 3 of those 20.
fin.daph <- vector()
for(j in 1:12){
pond.d <- pop[which(pond.i==j)]
pass.1 <- sample(pond.d,20)
pass.2 <- sample(pass.1,3)
fin.daph <- c(fin.daph,pass.2)
}
sim.dat <- tapply(traits[fin.daph],sort(rep(1:12,3)),mean)
test.mod <- aov(sim.dat~dry+drou)
summary(test.mod)[[1]][["Pr(>F)"]][1:2]
####First create synthetic data
###draw log-normal probabilities
rdraw <- rlnorm(n.genes)
samp.p <- rdraw/sum(rdraw)
###Now draw trait values to associate with each genotype
###Values are constrained to what we observed in our ponds
#traits <- rnorm(n.genes,1.75,.15)
###another version could use a uniform distribution
traits <- runif(n.genes,1.4,2.12)
##Now resample genotypes 1:1000 with probabilities from the log normal
s.size <- sum(round(runif(81,100,200)))
pop <- sample(1:n.genes,s.size,prob=samp.p,replace=T)
###Assign to one of 12 ponds
pond.i <-sample(1:12,s.size,replace=T)
###Sub sample ponds for 20 individuals, and then 3 of those 20.
fin.daph <- vector()
for(j in 1:12){
pond.d <- pop[which(pond.i==j)]
pass.1 <- sample(pond.d,20)
pass.2 <- sample(pass.1,3)
fin.daph <- c(fin.daph,pass.2)
}
sim.dat <- tapply(traits[fin.daph],sort(rep(1:12,3)),mean)
test.mod <- aov(sim.dat~dry+drou)
summary(test.mod)[[1]][["Pr(>F)"]][1:2]
####First create synthetic data
###draw log-normal probabilities
rdraw <- rlnorm(n.genes)
samp.p <- rdraw/sum(rdraw)
###Now draw trait values to associate with each genotype
###Values are constrained to what we observed in our ponds
#traits <- rnorm(n.genes,1.75,.15)
###another version could use a uniform distribution
traits <- runif(n.genes,1.4,2.12)
##Now resample genotypes 1:1000 with probabilities from the log normal
s.size <- sum(round(runif(81,100,200)))
pop <- sample(1:n.genes,s.size,prob=samp.p,replace=T)
###Assign to one of 12 ponds
pond.i <-sample(1:12,s.size,replace=T)
###Sub sample ponds for 20 individuals, and then 3 of those 20.
fin.daph <- vector()
for(j in 1:12){
pond.d <- pop[which(pond.i==j)]
pass.1 <- sample(pond.d,20)
pass.2 <- sample(pass.1,3)
fin.daph <- c(fin.daph,pass.2)
}
sim.dat <- tapply(traits[fin.daph],sort(rep(1:12,3)),mean)
test.mod <- aov(sim.dat~dry+drou)
summary(test.mod)[[1]][["Pr(>F)"]][1:2]
####First create synthetic data
###draw log-normal probabilities
rdraw <- rlnorm(n.genes)
samp.p <- rdraw/sum(rdraw)
###Now draw trait values to associate with each genotype
###Values are constrained to what we observed in our ponds
#traits <- rnorm(n.genes,1.75,.15)
###another version could use a uniform distribution
traits <- runif(n.genes,1.4,2.12)
##Now resample genotypes 1:1000 with probabilities from the log normal
s.size <- sum(round(runif(81,100,200)))
pop <- sample(1:n.genes,s.size,prob=samp.p,replace=T)
###Assign to one of 12 ponds
pond.i <-sample(1:12,s.size,replace=T)
###Sub sample ponds for 20 individuals, and then 3 of those 20.
fin.daph <- vector()
for(j in 1:12){
pond.d <- pop[which(pond.i==j)]
pass.1 <- sample(pond.d,20)
pass.2 <- sample(pass.1,3)
fin.daph <- c(fin.daph,pass.2)
}
sim.dat <- tapply(traits[fin.daph],sort(rep(1:12,3)),mean)
test.mod <- aov(sim.dat~dry+drou)
summary(test.mod)[[1]][["Pr(>F)"]][1:2]
####First create synthetic data
###draw log-normal probabilities
rdraw <- rlnorm(n.genes)
samp.p <- rdraw/sum(rdraw)
###Now draw trait values to associate with each genotype
###Values are constrained to what we observed in our ponds
#traits <- rnorm(n.genes,1.75,.15)
###another version could use a uniform distribution
traits <- runif(n.genes,1.4,2.12)
##Now resample genotypes 1:1000 with probabilities from the log normal
s.size <- sum(round(runif(81,100,200)))
pop <- sample(1:n.genes,s.size,prob=samp.p,replace=T)
###Assign to one of 12 ponds
pond.i <-sample(1:12,s.size,replace=T)
###Sub sample ponds for 20 individuals, and then 3 of those 20.
fin.daph <- vector()
for(j in 1:12){
pond.d <- pop[which(pond.i==j)]
pass.1 <- sample(pond.d,20)
pass.2 <- sample(pass.1,3)
fin.daph <- c(fin.daph,pass.2)
}
sim.dat <- tapply(traits[fin.daph],sort(rep(1:12,3)),mean)
test.mod <- aov(sim.dat~dry+drou)
summary(test.mod)[[1]][["Pr(>F)"]][1:2]
summary(test.mod)
sim.dat
plot(sim.dat~dry)
plot(sim.dat~drou)
count <- 0
for(i in 1:n.sim){
####First create synthetic data
###draw log-normal probabilities
rdraw <- rlnorm(n.genes)
samp.p <- rdraw/sum(rdraw)
###Now draw trait values to associate with each genotype
###Values are constrained to what we observed in our ponds
#traits <- rnorm(n.genes,1.75,.15)
###another version could use a uniform distribution
traits <- runif(n.genes,1.4,2.12)
##Now resample genotypes 1:1000 with probabilities from the log normal
s.size <- sum(round(runif(81,100,200)))
pop <- sample(1:n.genes,s.size,prob=samp.p,replace=T)
###Assign to one of 12 ponds
pond.i <-sample(1:12,s.size,replace=T)
###Sub sample ponds for 20 individuals, and then 3 of those 20.
fin.daph <- vector()
for(j in 1:12){
pond.d <- pop[which(pond.i==j)]
pass.1 <- sample(pond.d,20)
pass.2 <- sample(pass.1,3)
fin.daph <- c(fin.daph,pass.2)
}
sim.dat <- tapply(traits[fin.daph],sort(rep(1:12,3)),mean)
test.mod <- aov(sim.dat~dry+drou)
if(summary(test.mod)[[1]][["Pr(>F)"]][1] < .05 && summary(test.mod)[[1]][["Pr(>F)"]][2] < .05){count <- count+1}
}
count
27/1000
gens.sim <- function(n.sim,n.genes){
count <- 0
for(i in 1:n.sim){
####First create synthetic data
###draw log-normal probabilities
rdraw <- rlnorm(n.genes)
samp.p <- rdraw/sum(rdraw)
###Now draw trait values to associate with each genotype
###Values are constrained to what we observed in our ponds
#traits <- rnorm(n.genes,1.75,.15)
###another version could use a uniform distribution
traits <- runif(n.genes,1.4,2.12)
##Now resample genotypes 1:1000 with probabilities from the log normal
s.size <- sum(round(runif(81,100,200)))
pop <- sample(1:n.genes,s.size,prob=samp.p,replace=T)
###Assign to one of 12 ponds
pond.i <-sample(1:12,s.size,replace=T)
###Sub sample ponds for 20 individuals, and then 3 of those 20.
fin.daph <- vector()
for(j in 1:12){
pond.d <- pop[which(pond.i==j)]
pass.1 <- sample(pond.d,20)
pass.2 <- sample(pass.1,3)
fin.daph <- c(fin.daph,pass.2)
}
sim.dat <- tapply(traits[fin.daph],sort(rep(1:12,3)),mean)
test.mod <- aov(sim.dat~dry+drou)
if(summary(test.mod)[[1]][["Pr(>F)"]][1] < .05 && summary(test.mod)[[1]][["Pr(>F)"]][2] < .05){count <- count+1}
}
return(count)}
n.genes
traits.sim <- function(n.sim,n.genes){
count <- 0
for(i in 1:n.sim){
####First create synthetic data
###draw log-normal probabilities
rdraw <- rlnorm(n.genes)
samp.p <- rdraw/sum(rdraw)
###Now draw trait values to associate with each genotype
###Values are constrained to what we observed in our ponds
#traits <- rnorm(n.genes,1.75,.15)
###another version could use a uniform distribution
traits <- runif(n.genes,1.4,2.12)
##Now resample genotypes 1:1000 with probabilities from the log normal
s.size <- sum(round(runif(81,100,200)))
pop <- sample(1:n.genes,s.size,prob=samp.p,replace=T)
###Assign to one of 12 ponds
pond.i <-sample(1:12,s.size,replace=T)
###Sub sample ponds for 20 individuals, and then 3 of those 20.
fin.daph <- vector()
for(j in 1:12){
pond.d <- pop[which(pond.i==j)]
pass.1 <- sample(pond.d,20)
pass.2 <- sample(pass.1,3)
fin.daph <- c(fin.daph,pass.2)
}
sim.dat <- tapply(traits[fin.daph],sort(rep(1:12,3)),mean)
test.mod <- aov(sim.dat~dry+drou)
if(summary(test.mod)[[1]][["Pr(>F)"]][1] < .05 && summary(test.mod)[[1]][["Pr(>F)"]][2] < .05){count <- count+1}
}
return(count)}
traits.sim(1000,3000)
traits.sim(1000,5000)
traits.sim(1000,5000)
traits.sim(1000,10000)
traits.sim(1000,100)
traits.sim(1000,100)
traits.sim <- function(n.sim,n.genes){
count <- 0
for(i in 1:n.sim){
####First create synthetic data
###draw log-normal probabilities
rdraw <- rlnorm(n.genes)
samp.p <- rdraw/sum(rdraw)
###Now draw trait values to associate with each genotype
###Values are constrained to what we observed in our ponds
traits <- rnorm(n.genes,1.75,.15)
###another version could use a uniform distribution
#traits <- runif(n.genes,1.4,2.12)
##Now resample genotypes 1:1000 with probabilities from the log normal
s.size <- sum(round(runif(81,100,200)))
pop <- sample(1:n.genes,s.size,prob=samp.p,replace=T)
###Assign to one of 12 ponds
pond.i <-sample(1:12,s.size,replace=T)
###Sub sample ponds for 20 individuals, and then 3 of those 20.
fin.daph <- vector()
for(j in 1:12){
pond.d <- pop[which(pond.i==j)]
pass.1 <- sample(pond.d,20)
pass.2 <- sample(pass.1,3)
fin.daph <- c(fin.daph,pass.2)
}
sim.dat <- tapply(traits[fin.daph],sort(rep(1:12,3)),mean)
test.mod <- aov(sim.dat~dry+drou)
if(summary(test.mod)[[1]][["Pr(>F)"]][1] < .05 && summary(test.mod)[[1]][["Pr(>F)"]][2] < .05){count <- count+1}
}
return(count)}
traits.sim(1000,3000)
traits.sim(1000,300)
traits.sim(1000,50)
traits.sim(1000,50)
traits.sim(1000,20)
.25*.25
6/1000
traits.sim(100,2000)
traits.sim(100,2000)
traits.sim(100,2000)
traits.sim(5000,2000)
21/5000
traits.sim <- function(n.sim,n.genes){
count <- 0
count.dry <- 0
count.drou <- 0
for(i in 1:n.sim){
####First create synthetic data
###draw log-normal probabilities
rdraw <- rlnorm(n.genes)
samp.p <- rdraw/sum(rdraw)
###Now draw trait values to associate with each genotype
###Values are constrained to what we observed in our ponds
traits <- rnorm(n.genes,1.75,.15)
###another version could use a uniform distribution
#traits <- runif(n.genes,1.4,2.12)
##Now resample genotypes 1:1000 with probabilities from the log normal
s.size <- sum(round(runif(81,100,200)))
pop <- sample(1:n.genes,s.size,prob=samp.p,replace=T)
###Assign to one of 12 ponds
pond.i <-sample(1:12,s.size,replace=T)
###Sub sample ponds for 20 individuals, and then 3 of those 20.
fin.daph <- vector()
for(j in 1:12){
pond.d <- pop[which(pond.i==j)]
pass.1 <- sample(pond.d,20)
pass.2 <- sample(pass.1,3)
fin.daph <- c(fin.daph,pass.2)
}
sim.dat <- tapply(traits[fin.daph],sort(rep(1:12,3)),mean)
test.mod <- aov(sim.dat~dry+drou)
if(summary(test.mod)[[1]][["Pr(>F)"]][1] < .05 && summary(test.mod)[[1]][["Pr(>F)"]][2] < .05){count <- count+1}
if(summary(test.mod)[[1]][["Pr(>F)"]][1] < .05){count.dry<- count.dry+1}
if(summary(test.mod)[[1]][["Pr(>F)"]][2] < .05){count.drou<- count.drou+1}
}
return(c(count,count.dry,count.drou)}
traits.sim <- function(n.sim,n.genes){
count <- 0
count.dry <- 0
count.drou <- 0
for(i in 1:n.sim){
####First create synthetic data
###draw log-normal probabilities
rdraw <- rlnorm(n.genes)
samp.p <- rdraw/sum(rdraw)
###Now draw trait values to associate with each genotype
###Values are constrained to what we observed in our ponds
traits <- rnorm(n.genes,1.75,.15)
###another version could use a uniform distribution
#traits <- runif(n.genes,1.4,2.12)
##Now resample genotypes 1:1000 with probabilities from the log normal
s.size <- sum(round(runif(81,100,200)))
pop <- sample(1:n.genes,s.size,prob=samp.p,replace=T)
###Assign to one of 12 ponds
pond.i <-sample(1:12,s.size,replace=T)
###Sub sample ponds for 20 individuals, and then 3 of those 20.
fin.daph <- vector()
for(j in 1:12){
pond.d <- pop[which(pond.i==j)]
pass.1 <- sample(pond.d,20)
pass.2 <- sample(pass.1,3)
fin.daph <- c(fin.daph,pass.2)
}
sim.dat <- tapply(traits[fin.daph],sort(rep(1:12,3)),mean)
test.mod <- aov(sim.dat~dry+drou)
if(summary(test.mod)[[1]][["Pr(>F)"]][1] < .05 && summary(test.mod)[[1]][["Pr(>F)"]][2] < .05){count <- count+1}
if(summary(test.mod)[[1]][["Pr(>F)"]][1] < .05){count.dry<- count.dry+1}
if(summary(test.mod)[[1]][["Pr(>F)"]][2] < .05){count.drou<- count.drou+1}
}
return(c(count,count.dry,count.drou))}
traits.sim(1000,20)
50/1000
traits.sim(1000,2000)
traits.sim(1000,2000)
.02*180
